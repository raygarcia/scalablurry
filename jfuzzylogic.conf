// These are parser settings

parser {

  // Comments:
  // The FCL specification does not specify the
  // the characters for single and multi-line comments.
  // However, other parts of the entire spec use the
  // sequence "(*" <comment text> "*)".
  // Here, you can specify the single and multi-line
  // comment tokens
  fclComment{
    singleLine = """//"""
    multiLineBegin = """/*"""
    multiLineEnd = """*/"""
  }

  defuzMappings {
    // The standard uses the following case (mixed case for some):
    // "RM", "LM", CoG", "CoA", "CoGS"
    RM{
      token = RM
    }
    LM{
      token = LM
    }
    COG{
      token = COG
    }
    COA{
      token = COA
    }
    COGS{
      token = COGS
    }
  }

  // Extended membership function (emf) mappings
  // Primarily used to set up compatibility with
  // other fuzzy logic libraries
  emfMappings {
    // number of points for membership function estimation
    // like guassian, generized bell, and sigmoidal.
    // The idea is that a table lookup is faster than func calling
    numOfEstimationPoints =25

    # Triangular: triangular min mid max
    # Trapetzoidal: trapetzoidal min midLow midHigh max
    # Gaussian: gaussian mean stdev
    # Generalized bell: generalizedBell a b mean
    # Sigmoidal: sigmoidal gain center

    Triangular = trian
    Trapetzoidal = trape // trapetzoidal
    Gaussian {
      token = gauss  // string used in fcl
      // number of standard deviations from the mean
      // to serve as it's "constant" value end points
      // 3= 99.7%, 5 = 99.9999%
      sdCount = 3
    }

    GeneralizedBell {
      token = gbell  // string used in fcl
      // how close should the min get to 0 (tails of the curve)
      // This value must be greater than 0.
      // If not, the range will be -inf to +inf
      limitPrecision = 0.01
    }
    Sigmoidal {
      token = sigm  // string used in fcl
      // how close should the min get to 0 and the max get to 1
      // must be greater than 0.  If not, the range will be -inf to +inf
      limitPrecision = 0.01
    }
  }
  plotting {
    plotPoints = 100 // the number of points used when plotting over a range
  }
}